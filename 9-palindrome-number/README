********************************************************************************
* Palindrome Number
* https://leetcode.com/problems/palindrome-number/
********************************************************************************

**
* Solution
**

    * Description
        Nothing fancy. The naive solution is the best solution. Iterate over the
        input number from least significant to most significant digit and
        construct a reversed number by appending these digits to a number from
        most significant to least significant.

        Note that it seems theoretically possible to falsely report a number as
        palindromic if reversing it results in an overflow that coincidentally
        reproduces the number. I don't think such a number exists within the
        range of 32-bit signed integers. This is why my implementation uses a
        long to reverse the number. This could also be accomplished by checking
        for overflow at every iteration.

    * Time Complexity
        O(n)
        We must iterate over O(n) digits to test the number is palindromic.

    * Memory Complexity
        O(n)
        This implementation requires that we keep a reversed number of O(n)
        length in memory.

